/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#pragma once

#include <app/data-model-provider/MetadataTypes.h>
#include <lib/core/DataModelTypes.h>

#include <cstdint>

#include <clusters/Pm25ConcentrationMeasurement/Ids.h>

namespace chip {
namespace app {
namespace Clusters {
namespace Pm25ConcentrationMeasurement {

inline constexpr uint32_t kRevision = 3;

namespace Attributes {
namespace MeasuredValue{
inline constexpr DataModel::AttributeEntry kMetadataEntry(
    MeasuredValue::Id,
    BitFlags<DataModel::AttributeQualityFlags>(),
    Access::Privilege::kView,
    std::nullopt
);
} // namespace MeasuredValue
namespace MinMeasuredValue{
inline constexpr DataModel::AttributeEntry kMetadataEntry(
    MinMeasuredValue::Id,
    BitFlags<DataModel::AttributeQualityFlags>(),
    Access::Privilege::kView,
    std::nullopt
);
} // namespace MinMeasuredValue
namespace MaxMeasuredValue{
inline constexpr DataModel::AttributeEntry kMetadataEntry(
    MaxMeasuredValue::Id,
    BitFlags<DataModel::AttributeQualityFlags>(),
    Access::Privilege::kView,
    std::nullopt
);
} // namespace MaxMeasuredValue
namespace PeakMeasuredValue{
inline constexpr DataModel::AttributeEntry kMetadataEntry(
    PeakMeasuredValue::Id,
    BitFlags<DataModel::AttributeQualityFlags>(),
    Access::Privilege::kView,
    std::nullopt
);
} // namespace PeakMeasuredValue
namespace PeakMeasuredValueWindow{
inline constexpr DataModel::AttributeEntry kMetadataEntry(
    PeakMeasuredValueWindow::Id,
    BitFlags<DataModel::AttributeQualityFlags>(),
    Access::Privilege::kView,
    std::nullopt
);
} // namespace PeakMeasuredValueWindow
namespace AverageMeasuredValue{
inline constexpr DataModel::AttributeEntry kMetadataEntry(
    AverageMeasuredValue::Id,
    BitFlags<DataModel::AttributeQualityFlags>(),
    Access::Privilege::kView,
    std::nullopt
);
} // namespace AverageMeasuredValue
namespace AverageMeasuredValueWindow{
inline constexpr DataModel::AttributeEntry kMetadataEntry(
    AverageMeasuredValueWindow::Id,
    BitFlags<DataModel::AttributeQualityFlags>(),
    Access::Privilege::kView,
    std::nullopt
);
} // namespace AverageMeasuredValueWindow
namespace Uncertainty{
inline constexpr DataModel::AttributeEntry kMetadataEntry(
    Uncertainty::Id,
    BitFlags<DataModel::AttributeQualityFlags>(),
    Access::Privilege::kView,
    std::nullopt
);
} // namespace Uncertainty
namespace MeasurementUnit{
inline constexpr DataModel::AttributeEntry kMetadataEntry(
    MeasurementUnit::Id,
    BitFlags<DataModel::AttributeQualityFlags>(),
    Access::Privilege::kView,
    std::nullopt
);
} // namespace MeasurementUnit
namespace MeasurementMedium{
inline constexpr DataModel::AttributeEntry kMetadataEntry(
    MeasurementMedium::Id,
    BitFlags<DataModel::AttributeQualityFlags>(),
    Access::Privilege::kView,
    std::nullopt
);
} // namespace MeasurementMedium
namespace LevelValue{
inline constexpr DataModel::AttributeEntry kMetadataEntry(
    LevelValue::Id,
    BitFlags<DataModel::AttributeQualityFlags>(),
    Access::Privilege::kView,
    std::nullopt
);
} // namespace LevelValue

} // namespace Attributes

namespace Commands {

} // namespace Commands
} // namespace Pm25ConcentrationMeasurement
} // namespace Clusters
} // namespace app
} // namespace chip
