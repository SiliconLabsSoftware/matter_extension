name: Build Dev apps

on:
    push:
# TODO add these lines back       branches:
#            - main
#            - "release_*"
    pull_request:
        branches:
            - main
            - "release_*"
    workflow_dispatch:
        inputs:
            build-type:
                description: "The build type to use"
                required: true
                type: choice
                options:
                    - standard
                    - full
                    - release

concurrency:
    group: dev-build-examples-${{ github.ref }}
    cancel-in-progress: true

jobs:

    set-build-type:
        runs-on: ubuntu-latest
        outputs:
            build-type: ${{ steps.set-build-type.outputs.build-type }}
        steps:
            - name: Set build-type based on event
              id: set-build-type
              run: |
                  if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                      echo "build-type=${{ github.event.inputs.build-type }}" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
                      echo "build-type=standard" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.event_name }}" == "push" ]]; then
                      echo "build-type=standard" >> $GITHUB_OUTPUT
                  fi

    build-lighting-app:
        name: Build Lighting App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "lighting-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}

    build-air-quality-sensor-app:
        name: Build Air Quality Sensor App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "air-quality-sensor-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}

    build-light-switch-app:
        name: Build Light Switch App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "light-switch-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}

    build-lock-app:
        name: Build Lock App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "lock-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}
            ncp-917-support: true
            ncp-wf200-support: true
            ncp-rs911x-support: true

    build-thermostat-app:
        name: Build Thermostat App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "thermostat"
            build-type: ${{ needs.set-build-type.outputs.build-type }}
            ncp-917-support: true
            ncp-wf200-support: true
            ncp-rs911x-support: true

    build-window-app:
        name: Build Window App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "window-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}
            ncp-917-support: true

    build-fan-control-app:
        name: Build Fan Control App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "fan-control-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}
            thread-support: false

    build-multi-sensor-app:
        name: Build Multi Sensor App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "multi-sensor-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}

    build-onoff-plug-app:
        name: Build OnOff Plug App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "onoff-plug-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}

    build-refrigerator-app:
        name: Build Refrigerator App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "refrigerator-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}
            ncp-917-support: false
            ncp-wf200-support: false
            ncp-rs911x-support: false

    build-performance-test-app:
        name: Build Performance Test App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "performance-test-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}
            ncp-917-support: false
            ncp-wf200-support: false
            ncp-rs911x-support: false
            wifi-soc-support: false

    build-zigbee-matter-light-app:
        name: Build Zigbee Matter Light App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "zigbee-matter-light"
            build-type: ${{ needs.set-build-type.outputs.build-type }}
            thread-keyword: ""
            mg24-internal-support: false
            mgm24-support: false
            mgm24-internal-support: false
            ncp-917-support: false
            ncp-wf200-support: false
            ncp-rs911x-support: false
            wifi-soc-support: false

    build-bootloaders:
        name: Build Bootloaders
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "matter-bootloader"
            build-type: ${{ needs.set-build-type.outputs.build-type }}
            wifi-soc-support: false
    
    build-sqa-tools:
        name: Build SQA Tools
        needs: set-build-type
        uses: ./.github/workflows/sqa-tools-builder.yaml
        with:
            build-type: ${{ needs.set-build-type.outputs.build-type }}

    merge-apps:
        name: Merge App Artifacts
        runs-on: ubuntu-latest
        needs:
            - set-build-type
            - build-sqa-tools
            - build-bootloaders
            - build-lighting-app
            - build-air-quality-sensor-app
            - build-light-switch-app
            - build-lock-app
            - build-thermostat-app
            - build-window-app
            - build-fan-control-app
            - build-multi-sensor-app
            - build-onoff-plug-app
            - build-refrigerator-app
            - build-performance-test-app
            - build-zigbee-matter-light-app
        if: success()

        steps:
            - name: Merge artifacts
              uses: actions/upload-artifact/merge@v4
              with:
                name: "dev-artifacts-${{ needs.set-build-type.outputs.build-type }}"
                delete-merged: true
                pattern: "*-${{ needs.set-build-type.outputs.build-type }}"

    wait-for-jenkins-status:
        name: Wait for Jenkins Status
        needs: merge-apps
        runs-on: ubuntu-latest
        steps:
            - name: Generate GitHub App Token
              id: generate_app_token
              uses: actions/create-github-app-token@v1
              with:
                  app-id: ${{ vars.SILABSSW_MATTER_CI_BOT_APP_ID }}
                  private-key: ${{ secrets.SILABSSW_MATTER_CI_BOT_APP_PRIVATE_KEY }}

            - name: Create Check Run for Test Results
              id: create_check_run
              run: |
                  curl -X POST \
                      -H "Authorization: Bearer ${{ steps.generate_app_token.outputs.token }}" \
                      -H "Accept: application/vnd.github.v3+json" \
                      https://api.github.com/repos/${{ github.repository }}/check-runs \
                      -d '{
                          "name": "Wait for Test Results",
                          "head_sha": "'${{ github.sha }}'",
                          "status": "in_progress"
                      }'

            - name: List Check Runs
              id: list_check_runs
              run: |
                  curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                       -H "Accept: application/vnd.github.v3+json" \
                        https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/check-runs > check_runs.json
                  cat check_runs.json

            - name: Extract Check Run ID
              id: extract_check_run_id
              run: |
                  CHECK_RUN_ID=$(jq -r --arg JOB_NAME "Wait for Jenkins Status" '.check_runs[] | select(.name == "Wait for Test Results") | .id' check_runs.json)
                  echo "CHECK_RUN_ID=$CHECK_RUN_ID" >> $GITHUB_ENV

            - name: Wait for Test Results
              id: wait_for_results
              run: |
                  echo "Waiting for check run to complete..."
                  elapsed_time=0
                  timeout=3300
                  while true; do
                      response=$(curl -s -H "Authorization: Bearer ${{ steps.generate_app_token.outputs.token }}" \
                          -H "Accept: application/vnd.github.v3+json" \
                          https://api.github.com/repos/${{ github.repository }}/check-runs/${CHECK_RUN_ID})

                      status=$(echo "$response" | jq -r '.status // empty')
                      conclusion=$(echo "$response" | jq -r '.conclusion // empty')

                      if [[ "$status" == "completed" ]]; then
                          title=$(echo "$response" | jq -r '.output.title // empty')
                          summary=$(echo "$response" | jq -r '.output.summary // empty')
                          text=$(echo "$response" | jq -r '.output.text // empty')

                          echo "Check run completed successfully:"
                          echo "Title: $title"
                          echo "Summary: $summary"
                          echo "Text: $text"
                          if [[ "$conclusion" == "failure" ]]; then
                              echo "Sanity tests failed. Exiting workflow."
                              exit 1
                          fi
                          echo "completed=true" >> $GITHUB_OUTPUT
                          break
                      fi

                      if [[ "$elapsed_time" -ge "$timeout" ]]; then
                          echo "completed=false" >> $GITHUB_OUTPUT
                          echo "Token timeout reached."
                          break 
                      fi

                      echo "Waiting for check run to complete..."
                      sleep 60
                      elapsed_time=$((elapsed_time + 60))
                  done

            - name: Generate new token since token times out after 1 hour
              if: steps.wait_for_results.outputs.completed == 'false'
              id: refresh_token
              uses: actions/create-github-app-token@v1
              with:
                  app-id: ${{ vars.SILABSSW_MATTER_CI_BOT_APP_ID }}
                  private-key: ${{ secrets.SILABSSW_MATTER_CI_BOT_APP_PRIVATE_KEY }}

            - name: Wait for Test Results
              if: steps.wait_for_results.outputs.completed == 'false'
              run: |
                  echo "Waiting for check run to complete..."
                  elapsed_time=0
                  timeout=3300
                  while true; do
                      response=$(curl -s -H "Authorization: Bearer ${{ steps.refresh_token.outputs.token }}" \
                          -H "Accept: application/vnd.github.v3+json" \
                          https://api.github.com/repos/${{ github.repository }}/check-runs/${CHECK_RUN_ID})

                      status=$(echo "$response" | jq -r '.status // empty')
                      conclusion=$(echo "$response" | jq -r '.conclusion // empty')

                      if [[ "$status" == "completed" ]]; then
                          title=$(echo "$response" | jq -r '.output.title // empty')
                          summary=$(echo "$response" | jq -r '.output.summary // empty')
                          text=$(echo "$response" | jq -r '.output.text // empty')

                          echo "Check run completed successfully:"
                          echo "Title: $title"
                          echo "Summary: $summary"
                          echo "Text: $text"
                          if [[ "$conclusion" == "failure" ]]; then
                              echo "Sanity tests failed. Exiting workflow."
                              exit 1
                          fi
                          break
                      fi

                      if [[ "$elapsed_time" -ge "$timeout" ]]; then
                          curl -X PATCH \
                              -H "Authorization: Bearer ${{ steps.refresh_token.outputs.token }}" \
                              -H "Accept: application/vnd.github.v3+json" \
                              https://api.github.com/repos/${{ github.repository }}/check-runs/${CHECK_RUN_ID} \
                              -d '{
                                  "status": "completed",
                                  "conclusion": "timed_out"
                              }'
                          echo "Timeout reached."
                          exit 1 
                      fi

                      echo "Waiting for check run to complete..."
                      sleep 60
                      elapsed_time=$((elapsed_time + 60))
                  done

    trigger-sqa-workflow:
        name: Trigger SQA Workflow
        needs: wait-for-jenkins-status
        runs-on: ubuntu-latest
        steps:
            - name: Trigger Workflow
              run: |
                  curl -X POST \
                      -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                      -H "Accept: application/vnd.github.v3+json" \
                      https://api.github.com/repos/${{ github.repository }}/actions/workflows/sqa-apps-builder.yaml/dispatches \
                      -d '{
                          "ref": "${{ github.ref }}"
                      }'