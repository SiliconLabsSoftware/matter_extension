name: Build Dev apps

on:
    push:
        branches:
            - main
            - "release_*"
    pull_request:
        branches:
            - main
            - "release_*"
            
    workflow_dispatch:
        inputs:
            build-type:
                description: "The build type to use"
                required: true
                type: choice
                options:
                    - standard
                    - full

concurrency:
    group: dev-build-examples-${{ github.ref }}
    cancel-in-progress: true

jobs:

    set-build-type:
        runs-on: ubuntu-latest
        outputs:
            build-type: ${{ steps.set-build-type.outputs.build-type }}
        steps:
            - name: Set build-type based on event
              id: set-build-type
              run: |
                  if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                      echo "build-type=${{ github.event.inputs.build-type }}" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
                      echo "build-type=standard" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.event_name }}" == "push" ]]; then
                      if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == refs/heads/release_* ]]; then
                          echo "build-type=full" >> $GITHUB_OUTPUT
                      else
                          echo "build-type=standard" >> $GITHUB_OUTPUT
                      fi
                  fi

    build-lighting-app:
        name: Build Lighting App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "lighting-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}
            sixg301-support: true

    build-air-quality-sensor-app:
        name: Build Air Quality Sensor App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "air-quality-sensor-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}

    build-light-switch-app:
        name: Build Light Switch App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "light-switch-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}

    build-lock-app:
        name: Build Lock App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "lock-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}
            ncp-917-support: true
            ncp-wf200-support: true
            ncp-rs911x-support: true

    build-thermostat-app:
        name: Build Thermostat App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "thermostat"
            build-type: ${{ needs.set-build-type.outputs.build-type }}
            ncp-917-support: true
            ncp-wf200-support: true
            ncp-rs911x-support: true

    build-window-app:
        name: Build Window App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "window-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}
            ncp-917-support: true

    build-fan-control-app:
        name: Build Fan Control App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "fan-control-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}
            thread-support: false

    build-closure-app:
        name: Build Closure App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "closure-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}

    build-multi-sensor-app:
        name: Build Multi Sensor App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "multi-sensor-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}

    build-onoff-plug-app:
        name: Build OnOff Plug App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "onoff-plug-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}

    build-refrigerator-app:
        name: Build Refrigerator App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "refrigerator-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}
    
    build-performance-test-app:
        name: Build Performance Test App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "performance-test-app"
            build-type: ${{ needs.set-build-type.outputs.build-type }}
            wifi-soc-support: false

    build-zigbee-matter-light-app:
        name: Build Zigbee Matter Light App
        needs: set-build-type
        uses: ./.github/workflows/platform-builder.yaml
        with:
            example-app: "zigbee-matter-light"
            build-type: ${{ needs.set-build-type.outputs.build-type }}
            thread-keyword: ""
            mg24-internal-support: false
            mgm24-support: false
            mgm24-internal-support: false
            wifi-soc-support: false
            sixg301-support: true
    
    build-sqa-tools:
        name: Build SQA Tools
        needs: set-build-type
        uses: ./.github/workflows/sqa-tools-builder.yaml
        with:
            build-type: ${{ needs.set-build-type.outputs.build-type }}

    merge-apps:
        name: Merge App Artifacts
        runs-on: ubuntu-latest
        needs:
            - set-build-type
            - build-sqa-tools
            - build-lighting-app
            - build-air-quality-sensor-app
            - build-light-switch-app
            - build-lock-app
            - build-thermostat-app
            - build-window-app
            - build-fan-control-app
            - build-multi-sensor-app
            - build-onoff-plug-app
            - build-refrigerator-app
            - build-performance-test-app
            - build-zigbee-matter-light-app
            - build-closure-app
        if: success()

        steps:
            - name: Merge artifacts
              uses: actions/upload-artifact/merge@v4
              with:
                name: "dev-artifacts-${{ needs.set-build-type.outputs.build-type }}"
                delete-merged: true
                pattern: "*-${{ needs.set-build-type.outputs.build-type }}"

    trigger-jenkins-sqa:
        name: Trigger Jenkins SQA
        runs-on: ubuntu-latest
        needs: [merge-apps, set-build-type]
        if: success()
        steps:
            - name: Generate GitHub App Token
              id: generate_app_token
              uses: actions/create-github-app-token@v2
              with:
                app-id: ${{ vars.SILABSSW_MATTER_CI_BOT_APP_ID }}
                private-key: ${{ secrets.SILABSSW_MATTER_CI_BOT_APP_PRIVATE_KEY }}

            - name: Send Jenkins Repository Dispatch
              run: |
                # Get the latest commit SHA for this build
                COMMIT_SHA="${{ github.sha }}"
                BUILD_TYPE="${{ needs.set-build-type.outputs.build-type }}"
                BRANCH_NAME="${{ github.ref_name }}"
                
                # Determine trigger source
                if [ "${{ github.event_name }}" == "schedule" ]; then
                  TRIGGER_SOURCE="daily-automated-build"
                else
                  TRIGGER_SOURCE="${{ github.event_name }}"
                fi
                
                echo "Triggering Jenkins SQA for commit: $COMMIT_SHA"
                echo "Build type: $BUILD_TYPE"
                echo "Trigger source: $TRIGGER_SOURCE"
                echo "Branch: $BRANCH_NAME"
                
                # Send repository dispatch event that Jenkins webhook can receive
                curl -X POST \
                  -H "Authorization: Bearer ${{ steps.generate_app_token.outputs.token }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/repos/${{ github.repository }}/dispatches \
                  -d '{
                    "event_type": "jenkins-sqa-trigger",
                    "client_payload": {
                      "commit_sha": "'${COMMIT_SHA}'",
                      "branch_name": "'${BRANCH_NAME}'",
                      "build_type": "'${BUILD_TYPE}'",
                      "trigger_source": "'${TRIGGER_SOURCE}'",
                      "github_run_id": "${{ github.run_id }}",
                      "github_event": "${{ github.event_name }}",
                      "artifacts_name": "dev-artifacts-'${BUILD_TYPE}'",
                      "trigger_time": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
                    }
                  }'
                  
                echo "Successfully sent Jenkins SQA trigger event"

    wait-for-test-results:
        name: Wait for Test Results
        needs: merge-apps
        uses: ./.github/workflows/sqa-sanity-tests.yaml
        secrets:
            SILABSSW_MATTER_CI_BOT_APP_PRIVATE_KEY: ${{ secrets.SILABSSW_MATTER_CI_BOT_APP_PRIVATE_KEY }}

    trigger-sqa-workflow:
        name: Trigger SQA Workflow
        needs: wait-for-test-results
        runs-on: ubuntu-latest
        if: ${{ startsWith(github.ref, 'refs/heads/release_') || github.ref == 'refs/heads/main' }}
        steps:
            - name: Trigger Workflow
              run: |
                  curl -X POST \
                      -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                      -H "Accept: application/vnd.github.v3+json" \
                      https://api.github.com/repos/${{ github.repository }}/actions/workflows/sqa-apps-builder.yaml/dispatches \
                      -d '{
                          "ref": "${{ github.ref }}"
                      }'
