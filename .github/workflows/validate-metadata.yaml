name: Validate Metadata

on:
  workflow_call:
    inputs:
      build-type: 
        description: "The build type to use"
        required: true
        type: string

concurrency: 
    group: validate-metadata-${{ github.ref }}
    cancel-in-progress: true

jobs:
  validate-package-field:
    name: Validate Matter Extension Package Field
    runs-on: ubuntu-latest
    continue-on-error: true 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: false 

      - name: Stage Extension
        run: python3 slc/stage_extension.py sisdk/extension/ext

      - name: Validate Matter Extension Package Field
        shell: bash
        working-directory: ${{ github.workspace }}/sisdk/extension/ext/matter_extension
        run: |
          set -e 
          OUTPUT_DIR="$(pwd)/validate_metadata_output"
          mkdir -p "$OUTPUT_DIR" 

          # temporarily simulate error 
          echo "Files missing 'package: matter' field:" > missing_package_matter.txt
          echo "  - slc/component/test_component.slcc" >> missing_package_matter.txt
          echo "  - slc/component/another_component.slcc" >> missing_package_matter.txt
          echo "  - templates/test_template.slcp" >> missing_package_matter.txt
          echo "" >> missing_package_matter.txt
          echo "Total files with missing package field: 3" >> missing_package_matter.txt

          {# output=$(python3 -u './slc/script/verify_package_matter.py' --directory . --verbose 2>&1) #}

          output="ERROR - Some files are missing the required 'package: matter' field"
          echo "$output"
          no_warning="INFO - All .slcc, .slcp, and .slce files contain the required strings."
          if [[ "$output" != *"$no_warning"* ]]; then
            if [[ -f "missing_package_matter.txt" ]]; then
              echo "Packages without 'package: matter' detected"
              cp missing_package_matter.txt "$OUTPUT_DIR/"
              exit 1 
            else 
              echo "Error: 'missing_package_matter.txt' does not exist, but it was expected."
              exit 1
            fi
          fi

      - name: Upload package validation results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: package-validation
          path: sisdk/extension/ext/matter_extension/validate_metadata_output/
          if-no-files-found: ignore

  validate-file-path-lengths:
    name: Validate Matter Extension File Path Lengths
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: false 
      
    - name: Stage Extension
      run: python3 slc/stage_extension.py sisdk/extension/ext

    - name: Validate Matter Extension File Path Lengths 
      shell: bash
      working-directory: ${{ github.workspace }}/sisdk/extension/ext/matter_extension
      run: |
        set -e 
        OUTPUT_DIR="$(pwd)/validate_metadata_output"      
        mkdir -p "$OUTPUT_DIR"
        pwd 

        # temporarily simulate error
        echo "Files with paths exceeding 240 characters:" > long_file_paths.txt
        echo "" >> long_file_paths.txt
        echo "Length: 245 - slc/component/very_long_component_name_that_exceeds_the_maximum_allowed_file_path_length_limit_for_windows_systems_and_should_be_shortened_to_comply_with_the_requirements_test.slcc" >> long_file_paths.txt
        echo "Length: 251 - templates/extremely_long_template_name_that_definitely_exceeds_the_240_character_limit_and_would_cause_issues_on_windows_file_systems_so_it_needs_to_be_renamed_to_something_much_shorter_and_more_reasonable.slcp" >> long_file_paths.txt
        echo "Length: 243 - docs/api/reference/very_detailed_documentation_file_with_an_unnecessarily_long_filename_that_should_be_shortened_for_better_compatibility_across_different_operating_systems_and_file_systems.md" >> long_file_paths.txt
        echo "" >> long_file_paths.txt
        echo "Total files with long paths: 3" >> long_file_paths.txt

        {# output=$(python3 -u './slc/script/file_path_length_analyzer.py' --directory . --verbose 2>&1) #}
       
        output="WARNING: Files with paths exceeding 240 characters detected"
        echo "$output"
        no_warning="INFO:__main__:No file paths exceeding 240 characters were detected. Nothing will be written to the file."
        if [[ "$output" != *"$no_warning"* ]]; then
          if [[ -f "long_file_paths.txt" ]]; then
            echo "File paths exceeding 240 characters detected!"
            cp long_file_paths.txt "$OUTPUT_DIR/"
            exit 1
          else
            echo "Error: 'long_file_paths.txt' does not exist, but it was expected."
            exit 1
          fi  
        fi 

    - name: Upload file path validation results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: filepath-validation
        path: sisdk/extension/ext/matter_extension/validate_metadata_output/
        if-no-files-found: ignore

  validate-matter-templates:
    name: Validate Matter Templates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: false 

      - name: Stage Extension
        run: python3 slc/stage_extension.py sisdk/extension/ext

      - name: Validate Matter Templates 
        shell: bash
        working-directory: ${{ github.workspace }}/sisdk/extension/ext/matter_extension
        run: | 
          set -e
          OUTPUT_DIR="$(pwd)/validate_metadata_output"    
          mkdir -p "$OUTPUT_DIR"
          python3 -u './slc/script/validate_matter_templates.py' | tee "$OUTPUT_DIR/validate_matter_templates_result.log"

      - name: Upload template validation results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: template-validation
          path: sisdk/extension/ext/matter_extension/validate_metadata_output/
          if-no-files-found: ignore
   
  validate-components:
    name: Validate Components
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/siliconlabssoftware/matter_extension_dependencies:latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: false 

      - name: Mark Repository as Safe for Git
        shell: bash
        run: |
          git config --global --add safe.directory /__w/matter_extension/matter_extension

      - name: Stage Extension
        run: python3 slc/stage_extension.py sisdk/extension

      - name: Initialize required submodules
        shell: bash
        run: |
          git submodule update --init third_party/aws_ota_sdk
          git submodule update --init third_party/matter_sdk
          git submodule update --init third_party/matter_support
          git submodule update --init third_party/mbedtls
          git submodule update --init third_party/mqtt
          git submodule update --init third_party/nlassert
          git submodule update --init third_party/nlio
          git submodule update --init third_party/QR-Code-generator
          git submodule update --init third_party/wiseconnect-wifi-bt-sdk
      
      - name: Trust SDK 
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          set -e 
          echo "Trusting SDK at ${SISDK_ROOT}"
          slc configuration --sdk ${SISDK_ROOT} -data ${SISDK_ROOT}/out/dmp_uc.data
          slc signature trust --sdk ${SISDK_ROOT}

      - name: Validate Components
        shell: bash 
        working-directory: ${{ github.workspace }}
        continue-on-error: true 
        run: |
          set -e
          OUTPUT_DIR="$(pwd)/validate_metadata_output" 
          mkdir -p "$OUTPUT_DIR"
          python3 -u './slc/script/validate_components.py' sisdk/extension/matter_extension/slc/component slc | tee "$OUTPUT_DIR/component_validation_results.log"

      - name: Upload validation artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: component-validation
          path: validate_metadata_output/
          if-no-files-found: ignore

  merge-validation-artifacts:
    name: Merge Validation Results
    runs-on: ubuntu-latest
    needs:
      - validate-package-field
      - validate-file-path-lengths
      - validate-matter-templates
      - validate-components
    if: always()
    steps:
      - name: Merge validation artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: "validate-metadata-artifacts"
          delete-merged: true
          pattern: "*-validation"